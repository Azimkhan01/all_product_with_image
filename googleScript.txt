// function doGet() {
//   const MAIN_FOLDER_ID = '1ZlO2gTIhu85N642TNQt4xMOUyaNiiy-9'; // your folder ID
//   const mainFolder = DriveApp.getFolderById(MAIN_FOLDER_ID);
//   const result = {};
//   const mainFolderName = mainFolder.getName();
//   result[mainFolderName] = {};

//   const subfolders = mainFolder.getFolders();

//   while (subfolders.hasNext()) {
//     const subfolder = subfolders.next();
//     const subfolderName = subfolder.getName();
//     const images = [];

//     const files = subfolder.getFiles();
//     while (files.hasNext()) {
//       const file = files.next();
//       const mime = file.getMimeType();
//       if (mime.startsWith("image/")) {
//         const fileId = file.getId();
//         const imageUrl = `https://drive.google.com/uc?export=view&id=${fileId}`;
//         images.push(imageUrl);
//       }
//     }

//     result[mainFolderName][subfolderName] = images;
//   }

//   return ContentService
//     .createTextOutput(JSON.stringify(result, null, 2))
//     .setMimeType(ContentService.MimeType.JSON);
// }



















// function doGet() {
//   const ROOT_FOLDER_ID = '1ZlO2gTIhu85N642TNQt4xMOUyaNiiy-9'; // Root "Products" folder
//   const rootFolder = DriveApp.getFolderById(ROOT_FOLDER_ID);
//   const result = {};

//   const mainFolders = rootFolder.getFolders();

//   while (mainFolders.hasNext()) {
//     const mainFolder = mainFolders.next();
//     const mainFolderName = mainFolder.getName();
//     result[mainFolderName] = [];

//     const subfolders = mainFolder.getFolders();
//     let hasSubfolders = false;

//     while (subfolders.hasNext()) {
//       hasSubfolders = true;
//       const subfolder = subfolders.next();
//       const subfolderName = subfolder.getName();
//       const images = [];

//       const files = subfolder.getFiles();
//       while (files.hasNext()) {
//         const file = files.next();
//         if (file.getMimeType().startsWith("image/")) {
//           const imageUrl = `https://drive.google.com/uc?export=view&id=${file.getId()}`;
//           images.push(imageUrl);
//         }
//       }

//       result[mainFolderName].push({
//         nam: subfolderName,
//         images: images
//       });
//     }

//     // If no subfolders, get images directly from main folder
//     if (!hasSubfolders) {
//       const images = [];
//       const files = mainFolder.getFiles();
//       while (files.hasNext()) {
//         const file = files.next();
//         if (file.getMimeType().startsWith("image/")) {
//           const imageUrl = `https://drive.google.com/uc?export=view&id=${file.getId()}`;
//           images.push(imageUrl);
//         }
//       }

//       result[mainFolderName].push({
//         nam: "Main",
//         images: images
//       });
//     }
//   }

//   return ContentService
//     .createTextOutput(JSON.stringify(result, null, 2))
//     .setMimeType(ContentService.MimeType.JSON);
}







// function doGet() {
//   const ROOT_FOLDER_ID = '1JtxPi7YCh2P-WaNyEgq5PJ_iMZbBqm_N'; // Root "Products" folder
//   const rootFolder = DriveApp.getFolderById(ROOT_FOLDER_ID);
//   const result = {};

//   const mainFolders = rootFolder.getFolders();

//   while (mainFolders.hasNext()) {
//     const mainFolder = mainFolders.next();
//     const mainFolderName = mainFolder.getName();
//     result[mainFolderName] = [];

//     const subfolders = mainFolder.getFolders();
//     let hasSubfolders = false;

//     while (subfolders.hasNext()) {
//       hasSubfolders = true;
//       const subfolder = subfolders.next();
//       const subfolderName = subfolder.getName();
//       const images = [];

//       const files = subfolder.getFiles();
//       while (files.hasNext()) {
//         const file = files.next();
//         if (file.getMimeType().startsWith("image/")) {
//           const fileId = file.getId();
//           images.push(`https://drive.google.com/uc?export=view&id=${fileId}`);
//         }
//       }

//       result[mainFolderName].push({
//         nam: subfolderName,
//         images: images
//       });
//     }

//     // If no subfolders, get images directly from main folder
//     if (!hasSubfolders) {
//       const images = [];
//       const files = mainFolder.getFiles();
//       while (files.hasNext()) {
//         const file = files.next();
//         if (file.getMimeType().startsWith("image/")) {
//           const fileId = file.getId();
//           images.push(`https://drive.google.com/uc?export=view&id=${fileId}`);
//         }
//       }

//       result[mainFolderName].push({
//         nam: "Main",
//         images: images
//       });
//     }
//   }

//   return ContentService
//     .createTextOutput(JSON.stringify(result, null, 2))
//     .setMimeType(ContentService.MimeType.JSON);
// }




og2.0 have this code which for new folder uploaded 
function doGet() {
  const MAIN_FOLDER_ID = '1JtxPi7YCh2P-WaNyEgq5PJ_iMZbBqm_N'; // Root "Products" folder
  const mainFolder = DriveApp.getFolderById(MAIN_FOLDER_ID);
  const result = {};
  const mainFolderName = mainFolder.getName();
  result[mainFolderName] = {};

  const categoryFolders = mainFolder.getFolders(); // Fruit extract, Herbal extract...

  while (categoryFolders.hasNext()) {
    const categoryFolder = categoryFolders.next();
    const categoryName = categoryFolder.getName();
    result[mainFolderName][categoryName] = [];

    const subfolders = categoryFolder.getFolders(); // Apple, Mango, Neem, etc.

    while (subfolders.hasNext()) {
      const subfolder = subfolders.next();
      const subfolderName = subfolder.getName();
      const images = [];

      const files = subfolder.getFiles();
      while (files.hasNext()) {
        const file = files.next();
        if (file.getMimeType().startsWith("image/")) {
          const fileId = file.getId();
          const imageUrl = `https://drive.google.com/uc?export=view&id=${fileId}`;
          images.push(imageUrl);
        }
      }

      // push this folder's data
      result[mainFolderName][categoryName].push({
        nam: subfolderName,
        images: images
      });
    }
  }

  return ContentService
    .createTextOutput(JSON.stringify(result, null, 2))
    .setMimeType(ContentService.MimeType.JSON);
}
